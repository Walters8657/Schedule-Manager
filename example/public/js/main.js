$('document').ready(function() {
    shrinkText();
})

// UTILITY FUNCTIONS --------------------------------------------------------------------------------------------------

// SHRINK TEXT FUNCTION (NEAT)
function shrinkText() {
    if ($('#childFirstName')[0].scrollWidth > $('#childFirstName').innerWidth()) {
        currentSize = $('#childFirstName').css('font-size');
        currentSize = parseFloat(currentSize) - 1;
        $('#childFirstName').css('font-size', currentSize);
        shrinkText();
    }
    if ($('#childLastName')[0].scrollWidth > $('#childLastName').innerWidth()) {
        currentSize = $('#childLastName').css('font-size');
        currentSize = parseFloat(currentSize) - 1;
        $('#childLastName').css('font-size', currentSize);
        shrinkText();
    }
}

// CHILDREN SEARCH FUNCTION
// Used in: manageAccount.ejs, scheduleEvent.ejs, staffHome.ejs
function childrenSearch() {
    children = $('.aChild');

    for (let i = 0; i < children.length; i++) {
        if (children[i].outerText.replace('\n\n', ' ').toLowerCase().includes($('#childSearchBox').val().toLowerCase())) {
            children[i].parentElement.style.display = 'block';
        } else {
            children[i].parentElement.style.display = 'none'
        }
    }
}

// EVENT SEARCH FUNCTION
// Used in: viewEvent.ejs, viewScheduledEvent.ejs
function eventSearch() {
    events = $('.anEvent');

    for (let i = 0; i < events.length; i++) {
        if (events[i].firstElementChild.innerText.replace('\n\n', ' ').toLowerCase().includes($('#eventSearchBox').val().toLowerCase())) {
            events[i].style.display = 'block';
        } else {
            events[i].style.display = 'none'
        }
    }
}

// GENERATE USERNAME
// First 3 letters of the first name, first 5 letters of the last name, up to 3 random numbers.
// ex: jactanda325
function generateUsername(first_name, last_name) {
    const updatedFirstName = first_name.replace(/[^0-9a-z]/gi, '');
    const updatedLastName = last_name.replace(/[^0-9a-z]/gi, '');

    var username = updatedLastName.toLowerCase() + updatedFirstName.toLowerCase().substring(0, 1);
    username += Math.floor(Math.random() * Math.floor(999));

    return username;
}

// GENERATE PASSWORD
// Generate a new random password of length 10
function generatePassword(length = 10) {
    var result = '';
    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    for (var i = 0; i < length; i++) {
        result += characters.charAt(Math.floor(Math.random() * characters.length));
    }
    return result;
}

// CREATE ACCOUNT -----------------------------------------------------------------------------------------------------

// SEE CREATE ACCOUNT FORM VALUES
// Passes the variables for the create account form to a popup
// Used in: createAccount.ejs
function seeCreateAccountFormValues(popup, usernames) {
    fname = $('#fname').val();
    lname = $('#lname').val();
    birthDate = $('#birthDate').val();
    permissions = $('#permissions').val();
    gender = $('#gender').val();

    username = $('#username').val();
    password = $('#password').val();

    var newUserName;
    var newPassword;

    if (username == "") {
        do {
            newUserName = generateUsername(fname, lname);
        } while (usernames.includes(newUserName.toLowerCase()));
    } else {
        if (usernames.includes(username.toLowerCase())) {
            alert("Username already in use!");
            return;
        }
        if (!/^[0-9a-zA-Z_-]+$/.test(username)) {
            alert("Username has invalid characters\nValid characters: a-z, A-Z, 0-9, -, _");
            return;
        }
        if (username.length < 5) {
            alert("Username must be at least 5 characters long");
            return;
        }
        newUserName = username;
    }

    if (password == "") {
        newPassword = generatePassword();
    } else {
        if (password.length < 6 || password == "") {
            alert("Password must be at least 6 characters long");
            return;
        }
        newPassword = password;
    }

    // These are needed in case the username/password was auto generated
    // so that the route file knows autogenerated strings are.
    $('#username').val(newUserName);
    $('#password').val(newPassword);

    $('#newUserName').html(fname + ' ' + lname);
    $('#newUserPermissions').html(permissions);
    $('#newUserBirthday').html(birthDate);
    $('#newUserUsername').html(newUserName);
    $('#newUserPassword').html(newPassword);

    showPopup(popup);
}

// CREATE ACCOUNT
// Posts information about the user to be created
// Used in: createAccount.ejs
function createAccount() {
    postData = "userName=" + $('#username').val() + "&fname=" + encodeURIComponent($('#fname').val()) + "&lname=" + encodeURIComponent($('#lname').val()) + "&permissions=" + $('#permissions').val() + "&gender=" + $('#gender').val() + "&birthDate=" + $('#birthDate').val() + "&password=" + encodeURIComponent($('#password').val());

    var xhr = new XMLHttpRequest();
    xhr.open("POST", 'http://localhost:8080/staff/createAccount', true);
    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
    xhr.send(postData);

    location.replace('http://localhost:8080/staff/manageAccount');
}

// EDIT ACCOUNT -------------------------------------------------------------------------------------------------------

// SELECT ACCOUNT TO EDIT
// Pass username to set as session variable for account to edit
// Used in: manageAccount.ejs
function selectAccountToEdit(originalUsername) {
    postData = "originalUsername=" + originalUsername;

    var xhr = new XMLHttpRequest();
    xhr.open("POST", 'http://localhost:8080/staff/manageAccount', true);
    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
    xhr.send(postData);

    location.replace('http://localhost:8080/staff/editAccount');
}

// SEE DELETE ACCOUNT FORM VALUES
// Checks if there are too few overseers to delete an overseer account
// Used in: editAccount.ejs
function seeDeleteAccountFormValues(popup, numberOfOverseers, currentPermission) {
    if (numberOfOverseers < 2 && currentPermission == 'sysOverseer') {
        alert('You cannot delete the last overseer account!');
        return;
    }

    seeEditAccountFormValues(popup);
}

// SEE EDIT ACCOUNT FORM VALUES
// Passes variables to display in edit account confirmation popup.
// Used in: editAccount.ejs
function seeEditAccountFormValues(popup) {
    fname = $('#fname').val();
    lname = $('#lname').val();
    birthDate = $('#birthDate').val();

    switch($('#permissions').val()) {
        case 'sysOverseer':
            permissions = 'System overseer';
            break;
        case 'upStaff':
            permissions = 'Upper staff';
            break;
        case 'lowStaff':
            permissions = 'Lower staff';
            break;
        default:
            permissions = 'Child';
    }

    gender = $('#gender').val();

    oldpw = $('#oldpw').is(':checked');

    username = $('#username').val();
    password = $('#password').val();

    var newUserName;
    var newPassword;

    if (username == "")
        newUserName = generateUsername(fname, lname);
    else
        newUserName = username;

    // If they check the Use Old Password box
    if (oldpw == true)
        newPassword = ""; // Show no password on the popup
    else {
        // If the field is blank
        if (password == "")
            newPassword = generatePassword(); // Generate a random password
        else
            newPassword = password; // Use thier new password
    }

    // These are needed in case the username/password was auto generated
    // so that the route file knows autogenerated strings are.
    $('#username').val(newUserName);
    $('#password').val(newPassword);

    $('#newUserName').html(fname + ' ' + lname);
    $('#newUserPermissions').html(permissions);
    $('#newUserBirthday').html(birthDate);
    $('#newUserUsername').html(newUserName);
    $('#newUserPassword').html(newPassword);

    showPopup(popup);
}

// EDIT ACCOUNT
// Posts information about the user to be edited
// Used in: editAccount.ejs
function editAccount(operation) {

    postData = "operation=" + operation + "&userName=" + $('#username').val() + "&fname=" + encodeURIComponent($('#fname').val()) + "&lname=" + encodeURIComponent($('#lname').val()) + "&permissions=" + $('#permissions').val() + "&gender=" + $('#gender').val() + "&birthDate=" + $('#birthDate').val() + "&password=" + encodeURIComponent($('#password').val());

    var xhr = new XMLHttpRequest();
    xhr.open("POST", 'http://localhost:8080/staff/editAccount', true);
    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
    xhr.send(postData);

    location.replace('http://localhost:8080/staff/manageAccount');
}

// EVENT PRESET -------------------------------------------------------------------------------------------------------

// SEE EVENT PRESET FORM VALUES
// Passes variables to display in event preset creation confirmation popup.
// Used in: createEvent.ejs, editEventPreset.ejs
function seeEventPresetFormValues(popup) {
    eventName = $('#eventName').val();
    eventLocation = $('#eventLocation').val();
    eventDesc = $('#eventDesc').val();

    // Input validation
    if (eventName == "") {
        alert('Please enter an event name!');
    } else {
        $('#newEventName').html(eventName);
        $('#newEventLocation').html(eventLocation);
        $('#newEventDesc').html(eventDesc);

        showPopup(popup);
    }
}

// CREATE EVENT (PRESET)
// Posts information about the event preset to be created
// Used in: createEvent.ejs
function createTheEvent() {
    postData = "name=" + encodeURIComponent($('#eventName').val()) + "&location=" + encodeURIComponent($('#eventLocation').val()) + "&description=" + encodeURIComponent($('#eventDesc').val());

    var xhr = new XMLHttpRequest();
    xhr.open("POST", 'http://localhost:8080/staff/createEvent', true);
    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
    xhr.send(postData);

    location.replace('http://localhost:8080/staff/viewEvent');
}

// SELECT EVENT PRESET TO EDIT
// Posts the id of the desired event preset to edit
// Used in: viewEvent.ejs
function selectEventPresetToEdit(eventID) {
    postData = "eventIDToEdit=" + eventID;
    var xhr = new XMLHttpRequest();
    xhr.open("POST", 'http://localhost:8080/staff/viewEvent/', true);
    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
    xhr.send(postData);

    location.replace('http://localhost:8080/staff/editEventPreset');
}

// SELECT EVENT TO DELETE
// Passes information to a popup to confirm the deletion of an event
// Used in: viewEvent.ejs, viewScheduledEvents.ejs
function selectEventToDelete(popup, eventID) {
    $('#eventIDToDelete').html(eventID);
    $('#eventNameToDelete').val($('eventName').val());
    showPopup(popup);
}

// EDIT EVENT PRESET
// Posts the data to edit the event preset with
// Used in: editEventPreset.ejs, viewEvent.ejs
function editTheEventPreset(operation) {
    postData = "operation=" + operation + "&eventIDToDelete=" + $('#eventIDToDelete').html() + "&name=" + encodeURIComponent($('#eventName').val()) + "&location=" + encodeURIComponent($('#eventLocation').val()) + "&description=" + encodeURIComponent($('#eventDesc').val());

    var xhr = new XMLHttpRequest();
    xhr.open("POST", 'http://localhost:8080/staff/editEventPreset', true);
    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
    xhr.send(postData);

    location.replace('http://localhost:8080/staff/viewEvent');
}

// CALENDAR -----------------------------------------------------------------------------------------------------------

// VISIT CHILD'S CALENDAR
// Posts username to visit their specific calendar
// Used in: staffHome.ejs
function visitChildsCalendar(childUserName) {
    postData = "childUserName=" + childUserName + "&method=calendar";

    var xhr = new XMLHttpRequest();
    xhr.open("POST", 'http://localhost:8080/staff/', true);
    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
    xhr.send(postData);

    location.replace('http://localhost:8080/staff/viewcalendar');
}

// SEE CALENDAR EVENT VALUES
// Passes variables to display in calendar popup containing event information
// Used in: childHome.ejs, showChildCalendar.ejs
function seeCalendarEventValues(popup, eventName, eventDesc, eventStartTime, eventEndTime, eventLocation, calEventId, suffix= "", timeIn="", timeOut="") {
    var formattedStartTime = eventStartTime.toLocaleString('en-US');
    var formattedEndTime = eventEndTime.toLocaleString('en-US');

    $('#eventName' + suffix).html(eventName);
    $('#eventDesc' + suffix).html(eventDesc);
    $('#eventStartTime' + suffix).html(formattedStartTime);
    $('#eventEndTime' + suffix).html(formattedEndTime);
    $('#eventLocation' + suffix).html(eventLocation);
    $('#calEventId' + suffix).html(calEventId);
    $('#timeIn' + suffix).html(timeIn);
    $('#timeOut' + suffix).html(timeOut);

    showPopup(popup);
}

// GET COLOR FOR EVENT
// Gets the color for the event based on if they can clock in/out of the event
// Used in: childHome.ejs
function getColor(timecards, eventId, eventStartTime) {
    // Hex color values
    const CANT_CLOCK_IN_YET = '#1E438C';
    const CAN_CLOCK_IN = '#B2CA27';
    const CAN_CLOCK_OUT = '#B7002A';
    const ALREADY_CLOCKED_OUT = '#000000';

    for (let x = 0; x < timecards.length; x++) {
        if (timecards[x].eventId == eventId) {
            if (parseInt(timecards[x].timeOut) < 1) {
                return CAN_CLOCK_OUT;
            }
            return ALREADY_CLOCKED_OUT;
        }
    }
    if (new Date(eventStartTime).getTime() - new Date().getTime() < 900000) {
        return CAN_CLOCK_IN;
    }
    return CANT_CLOCK_IN_YET;
}

// SCHEDULE/DESCHEDULE ------------------------------------------------------------------------------------------------

// CONFIRMATION FOR DESCHEDULING EVENTS
// Simple popup used for confirming that the user wants to deschedule the event
// Used in: showChildCalendar.ejs
function confirmDescheduleEvent(popup) {
    showPopup(popup);
}

// DESCHEDULE EVENT
// Posts information about the user to deschedule an event for them on their calendar
// Used in: showChildCalendar.ejs
function descheduleEvent(userName) {
    postData = "userName=" + userName + "&eventId=" + $('#calEventId').html();

    var xhr = new XMLHttpRequest();
    xhr.open("POST", 'http://localhost:8080/staff/viewcalendar', true);
    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
    xhr.send(postData);

    location.replace('http://localhost:8080/staff/viewcalendar');
}

// SEE SCHEDULE EVENT FORM VALUES
// Passes information about the schedule event to a popup for confirmation
// Used in: scheduleEvent.ejs
function seeScheduleEventFormValues(complete_events, popup) {
    startTimeInput = new Date($('#timeStart').val());
    endTimeInput = new Date($('#timeEnd').val());

    // Date input validation
    // Blank inputs
    if (isNaN(startTimeInput) || isNaN(endTimeInput)) {
        if (isNaN(startTimeInput) && isNaN(endTimeInput)) {
            alert('Please enter a start time and an end time!');
        } else if (isNaN(startTimeInput)) {
            alert('Please enter a start time!');
        } else {
            alert('Please enter an end time!');
        }
        return;
    }
    // Invalid scheduled times (start time after end time)
    if (startTimeInput >= endTimeInput) {
        alert('Start time must come before end time!');
        return;
    }

    eventID = $('#eventName').val();
    timeStart = startTimeInput.toLocaleString();
    timeEnd = endTimeInput.toLocaleString();
    eventLocation = $('#eventLocation').val();

    var selectedChildren = [];
    $('input:checked').each(function() {
        selectedChildren.push($(this).attr('value'));
    });

    if (selectedChildren.length < 1) {
        alert('You must select a child to schedule an event for!');
        return;
    }
    /*
        // Input validation
        if (selectedChildren.length < 1 || timeStart.toLowerCase() == "invalid date" || timeEnd.toLowerCase() == "invalid date") {
            if (selectedChildren.length < 1 ) {
                alert('You must select a user to schedule an event for!');
            }

            if (timeStart.toLowerCase() == "invalid date") {
                alert('You must select a start-time for the event!');
            }

            if (timeEnd.toLowerCase() == "invalid date") {
                alert('You must select an end-time for the event!');
            }
        } else {
    */
    complete_events.forEach(ev => {
        if (ev.id == eventID) {
            $('#newEventName').html(ev.name);
            if (eventLocation != "") {
                $('#newEventLocation').html(eventLocation);
            } else {
                $('#newEventLocation').html(ev.location);
            }
        }
    });

    $('#newTimeStart').html(timeStart);
    $('#newTimeEnd').html(timeEnd);
    $('#selectedChildren').html(selectedChildren.join(", "));

    showPopup(popup);

}

// SCHEDULE EVENT
// Posts children to schedule event for and the event information
// Used in: scheduleEvent.ejs
function scheduleEvent() {
    var selectedChildren = [];
    $('input:checked').each(function() {
        selectedChildren.push($(this).attr('value'));
    });

    postData = "users=" + JSON.stringify(selectedChildren) + "&eventId=" + encodeURIComponent($('#eventName').val()) + "&startTime=" +
        new Date($('#timeStart').val()) + "&endTime=" + new Date($('#timeEnd').val()) + "&eventLocation=" + encodeURIComponent($('#eventLocation').val()) +
        "&description=" + encodeURIComponent($('#eventDesc').val());

    var xhr = new XMLHttpRequest();
    xhr.open("POST", 'http://localhost:8080/staff/scheduleEvent', true);
    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
    xhr.send(postData);

    location.replace('http://localhost:8080/staff/viewSchedule');
}

// SEE SCHEDULED EVENT FORM VALUES
// Passes the scheduled event information to a popup
// Used in: editScheduledEvent.ejs
function seeScheduledEventFormValues(popup) {
    eventName = $('#eventName').val();
    eventLocation = $('#eventLocation').val();
    eventDesc = $('#eventDesc').val();
    originalTickedChildren = $('#tickedChildren').html();
    console.log(originalTickedChildren);

    startTimeInput = new Date($('#timeStart').val());
    endTimeInput = new Date($('#timeEnd').val());

    // Date input validation
    // Blank inputs
    if (isNaN(startTimeInput) || isNaN(endTimeInput)) {
        if (isNaN(startTimeInput) && isNaN(endTimeInput)) {
            alert('Please enter a start time and an end time!');
        } else if (isNaN(startTimeInput)) {
            alert('Please enter a start time!');
        } else {
            alert('Please enter an end time!');
        }
        return;
    }
    // Invalid scheduled times (start time after end time)
    if (startTimeInput >= endTimeInput) {
        alert('Start time must come before end time!');
        return;
    }

    var selectedChildren = [];
    $('input:checked').each(function() {
        selectedChildren.push($(this).attr('value'));
    });

    timeStart = startTimeInput.toLocaleString();
    timeEnd = endTimeInput.toLocaleString();


    // Input validation
    if (eventName == "" || selectedChildren.length == 0) {
        if (eventName == "") {
            alert('Please enter an event name!');
        } else {
            alert('You must select a child to schedule an event for!');
        }

    } else {
        $('#newEventName').html(eventName);
        $('#newEventLocation').html(eventLocation);
        $('#newEventDesc').html(eventDesc);
        $('#newTimeStart').html(timeStart);
        $('#newTimeEnd').html(timeEnd);
        $('#selectedChildren').html(selectedChildren.join(", "));
        $('#originalTickedChildren').html(originalTickedChildren);
        showPopup(popup);
    }
}

// SELECT SCHEDULED EVENT TO EDIT
// Posts the ID of the event we want to edit
// User in: viewScheduledEvents.ejs
function selectScheduledEventToEdit(eventID) {
    postData = "eventIDToEdit=" + eventID;
    var xhr = new XMLHttpRequest();
    xhr.open("POST", 'http://localhost:8080/staff/viewSchedule/', true);
    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
    xhr.send(postData);

    location.replace('http://localhost:8080/staff/editScheduledEvent');
}

// PASS EVENT TO EDIT
// Passes the event ID to selectScheduledEventToEdit()
// This is used so we can re-use selectScheduledEventToEdit()
// Used in: showChildCalendar.ejs
function passEventToEdit() {
    selectScheduledEventToEdit($('#calEventId').html());
}

// EDIT THE SCHEDULED EVENT
// Posts information about the event to edit or delete
// Used in: editScheduledEvent.ejs, viewScheduledEvents.ejs
function editTheScheduledEvent(operation) {
    if (operation == "update") {
        console.log('hjere');
        console.log($('#originalTickedChildren').html());
        var selectedChildren = [];
        $('input:checked').each(function() {
            selectedChildren.push($(this).attr('value'));
        });
        console.log(selectedChildren);
        postData = "operation=" + operation + "&eventIDToDelete=" + $('#eventIDToDelete').html() + "&name=" + encodeURIComponent($('#eventName').val()) + "&location=" + encodeURIComponent($('#eventLocation').val()) + "&description=" + encodeURIComponent($('#eventDesc').val()) + "&timeStart=" + ($('#timeStart').val()).replace("T", " ") + "&timeEnd=" + ($('#timeEnd').val()).replace("T", " ") + "&users=" + JSON.stringify(selectedChildren) + "&originalTickedChildren=" + $('#originalTickedChildren').html();
    }
    if (operation == "delete")
        postData = "operation=" + operation + "&eventIDToDelete=" + $('#eventIDToDelete').html();
    var xhr = new XMLHttpRequest();
    xhr.open("POST", 'http://localhost:8080/staff/editScheduledEvent', true);
    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
    xhr.send(postData);

    location.replace('http://localhost:8080/staff/viewSchedule');
}

// TIMECARD -----------------------------------------------------------------------------------------------------------

// CLOCK IN
// Posts information about the user and the event they are clocking in to
// Used in: checkInOut.ejs
function clockIn(user_name, event_id, time, url='children/checkInOut') {
    postData = "userName=" + user_name + "&eventId=" + event_id + "&timeIn=" + time + "&timeOut=0&clock=in";

    var xhr = new XMLHttpRequest();
    xhr.open("POST", 'http://localhost:8080/' + url, true);
    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
    xhr.send(postData);

    location.replace('http://localhost:8080/' + url);
}

// CLOCK OUT
// Posts information about the user and the event they are clocking out of
// Used in: checkInOut.ejs
function clockOut(user_name, event_id, time, url='children/checkInOut') {
    postData = "userName=" + user_name + "&eventId=" + event_id + "&timeOut=" + time + "&clock=out";

    var xhr = new XMLHttpRequest();
    xhr.open("POST", 'http://localhost:8080/' + url, true);
    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
    xhr.send(postData);

    location.replace('http://localhost:8080/' + url);
}

// SELECT TIMECARD TO EDIT
// Posts the ID of the timecard we want to edit
// Used in: logs.ejs
function selectTimecardToEdit(timecardId) {
    postData = "timecardId=" + timecardId;
    var xhr = new XMLHttpRequest();
    xhr.open("POST", "http://localhost:8080/staff/logs/", true);
    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
    xhr.send(postData);

    location.replace('http://localhost:8080/staff/editTimecard');
}

// SEE TIMECARD FORM VALUES
// Pass information from the timecard to a popup
// Used in: editTimecard.ejs
function seeTimecardFormValues(popup) {
    startTimeInput = new Date($('#timeIn').val());
    endTimeInput = new Date($('#timeOut').val());

    // Date input validation
    // Blank inputs
    if (isNaN(startTimeInput) || isNaN(endTimeInput)) {
        if (isNaN(startTimeInput) && isNaN(endTimeInput)) {
            alert('Please enter a start time and an end time!');
        } else if (isNaN(startTimeInput)) {
            alert('Please enter a start time!');
        } else {
            alert('Please enter an end time!');
        }
        return;
    }
    // Invalid scheduled times (start time after end time)
    if (startTimeInput >= endTimeInput) {
        alert('Start time must come before end time!');
        return;
    }

    eventName = $('#eventName').html();
    timecardId = $('#timecardId').html();
    timeStart = startTimeInput.toLocaleString();
    timeEnd = endTimeInput.toLocaleString();

    $('#newUserInfo').html($('#userInfo').html());
    $('#editTimecardId').html(timecardId);
    $('#newEventName').html(eventName);
    $('#newTimeStart').html(timeStart);
    $('#newTimeEnd').html(timeEnd);
    showPopup(popup);
}

// EDIT THE TIMECARD
// Posts information for the editing of a timecard
// Used in: editTimecard.ejs
function editTheTimecard() {
    var formattedTimeIn = new Date($('#newTimeStart').html()).getTime();
    var formattedTimeOut = new Date($('#newTimeEnd').html()).getTime();
    postData = "timecardId=" + $('#editTimecardId').html() + "&timeIn=" + formattedTimeIn + "&timeOut=" + formattedTimeOut;

    var xhr = new XMLHttpRequest();
    xhr.open("POST", 'http://localhost:8080/staff/editTimecard', true);
    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
    xhr.send(postData);

    location.replace('http://localhost:8080/staff/logs');
}

// VIEW CHILD LOG
// Post the username for the child we would like to view the log for
// Used in: staffHome.ejs
function viewChildLog(childUserName) {
    postData = "childUserName=" + childUserName + "&method=log";

    var xhr = new XMLHttpRequest();
    xhr.open("POST", 'http://localhost:8080/staff/', true);
    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
    xhr.send(postData);

    location.replace('http://localhost:8080/staff/logs');
}

// REPORT -------------------------------------------------------------------------------------------------------------

// CREATE REPORT
// Posts information for the types of users we would like to generate a report on
// Used in: createReports.ejs
function createReport() {
    var name = $('#name').val();
    var ageMin = $('#ageMin').val();
    var ageMax = $('#ageMax').val();
    var gender = $('#gender').val();
    var eventName = $('#eventName').val();
    var eventType = $('#eventType').val();
    var startDate = $('#startDate').val();
    var endDate = $('#endDate').val();

    if (name == '')
        name = 'allNames';

    if (ageMin == '')
        ageMin = 0;

    if (ageMax == '')
        ageMax = 999;

    if (startDate == '') {
        startDate = 0; //Beginning of time
    } else {
        startDate = moment(startDate).format('X');
    }

    if (endDate == '') {
        endDate = moment().format('X'); //Right now
    } else {
        endDate = moment(endDate).format('X');
    }

    window.location.href = 'http://localhost:8080/staff/report?name=' + name + '&ageMin=' + ageMin + '&ageMax=' + ageMax + '&gender=' + gender + '&eventName=' + encodeURIComponent(eventName) + '&eventType=' + encodeURIComponent(eventType) + '&startDate=' + startDate + '&endDate=' + endDate;
}

// POPUPS -------------------------------------------------------------------------------------------------------------

// SHOW POPUP
// Show the desired popup with a blur and fade-in effect
function showPopup(popup) {
    $('body').children().addClass('blur');
    $(popup).removeClass('blur');
    $(popup).css('display', 'flex').hide().fadeIn();
}

// HIDE POPUP
// Hides the inputted popup
function hidePopup(popup) {
    $('body').children().removeClass('blur');
    $(popup).fadeOut();
}
